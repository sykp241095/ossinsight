/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Decimal = ColumnType<string, number | string>;

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = ColumnType<JsonValue, string, string>;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export interface Cache {
  cache_key: string;
  cache_value: Json;
  created_at: Generated<Date>;
  expired_at: Date | null;
  /**
   * cache will expire after n seconds
   */
  expires: Generated<number | null>;
  updated_at: Generated<Date>;
}

export interface CachedTableCache {
  cache_key: string;
  cache_value: Json;
  created_at: Generated<Date>;
  expired_at: Date | null;
  /**
   * cache will expire after n seconds
   */
  expires: Generated<number | null>;
  updated_at: Generated<Date>;
}

export interface CollectionItems {
  collection_id: number | null;
  created_at: Generated<Date>;
  deleted_at: Date | null;
  id: Generated<number>;
  issues_total: Generated<number>;
  last_2nd_month_rank: number | null;
  last_month_rank: number | null;
  pull_requests_total: Generated<number>;
  repo_id: number;
  repo_name: string;
  stars_total: Generated<number>;
  updated_at: Generated<Date>;
}

export interface Collections {
  created_at: Generated<Date>;
  deleted_at: Date | null;
  id: Generated<number>;
  name: string;
  past_month_visits: Generated<number>;
  public: Generated<number | null>;
  updated_at: Generated<Date>;
}

export interface GithubEvents {
  action: Generated<string>;
  actor_id: Generated<number>;
  actor_login: Generated<string>;
  additions: Generated<number>;
  closed_at: Generated<Date>;
  comment_id: Generated<number>;
  comments: Generated<number>;
  commit_id: Generated<string>;
  created_at: Generated<Date>;
  creator_user_id: Generated<number>;
  creator_user_login: Generated<string>;
  deletions: Generated<number>;
  event_day: Date;
  event_month: Date;
  event_year: number;
  id: Generated<number>;
  language: Generated<string>;
  number: Generated<number>;
  org_id: Generated<number>;
  org_login: Generated<string>;
  pr_changed_files: Generated<number>;
  pr_merged: Generated<number>;
  pr_merged_at: Generated<Date>;
  pr_or_issue_created_at: Generated<Date>;
  pr_or_issue_id: Generated<number>;
  pr_review_comments: Generated<number>;
  push_distinct_size: Generated<number>;
  push_size: Generated<number>;
  repo_id: Generated<number>;
  repo_name: Generated<string>;
  state: Generated<string>;
  type: Generated<string>;
}

export interface GithubRepoLanguages {
  language: string;
  repo_id: number;
  size: Generated<number>;
}

export interface GithubRepos {
  created_at: Generated<Date>;
  description: Generated<string>;
  forks: Generated<number>;
  is_archived: Generated<number>;
  is_deleted: Generated<number>;
  is_fork: Generated<number>;
  last_event_at: Generated<Date>;
  latest_released_at: Date | null;
  license: Generated<string>;
  owner_id: number;
  owner_is_org: number;
  owner_login: string;
  parent_repo_id: number | null;
  primary_language: Generated<string>;
  pushed_at: Date | null;
  refreshed_at: Generated<Date>;
  repo_id: number;
  repo_name: string;
  size: Generated<number>;
  stars: Generated<number>;
  updated_at: Generated<Date>;
}

export interface GithubRepoTopics {
  repo_id: number;
  topic: string;
}

export interface GithubUserAffiliations {
  affiliation_id: number;
  from: Generated<Date>;
  github_user_id: number;
  to: Generated<Date>;
}

export interface GithubUsers {
  address: Generated<string | null>;
  city: Generated<string>;
  country_code: Generated<string>;
  created_at: Generated<Date>;
  email: Generated<string>;
  followers: Generated<number>;
  followings: Generated<number>;
  id: number;
  is_bot: Generated<number>;
  is_deleted: Generated<number>;
  last_event_at: Generated<Date>;
  latitude: Generated<Decimal>;
  login: string;
  longitude: Generated<Decimal>;
  name: Generated<string>;
  organization: Generated<string | null>;
  organization_formatted: Generated<string | null>;
  participant_total: number | null;
  public_repos: Generated<number>;
  refreshed_at: Generated<Date>;
  region_code: Generated<string>;
  stars_total: number | null;
  state: Generated<string>;
  type: Generated<string>;
  updated_at: Generated<Date>;
}

export interface DB {
  cache: Cache;
  cache_old: CacheOld;
  cached_table_cache: CachedTableCache;
  cached_table_cache_old: CachedTableCacheOld;
  collection_items: CollectionItems;
  collections: Collections;
  github_events: GithubEvents;
  github_repo_languages: GithubRepoLanguages;
  github_repo_topics: GithubRepoTopics;
  github_repos: GithubRepos;
  github_user_affiliations: GithubUserAffiliations;
  github_users: GithubUsers;
}
